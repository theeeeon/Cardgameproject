Das Klassendiagramm befindet sich in der Projektmappe, allerdings vererbt grundsätzlich nur eine abstrakte Card Klasse. Um das Projekt übersichtlich zu gestalten wurde für Stack und Deck keine eigene Klasse angelegt. Der komplizierte Konstruktor in der Packages Klasse entsprang aus dem Gedanken, dass ein Package entweder aus einem gleichgroßen Pool aus 5 Karten zusammengestellt wird, oder aus einem größeren Pool zufällig 5 ausgewählt werden. Das static Dictionary soll die Datenbank darstellen und soll sich über mehrere Requests Einträge merken. Es gibt nur einen zweiten Teil nämlich den Server auch hier habe ich versucht weniger Klassen zu erstellen und übersichtlich zu bleiben. Der Server funktioniert wie schon oft vorgezeigt, er wartet auf Anfragen, der Handler vom Request benutzt Großteils den Samplecode, die Header vom Request werden nicht abgespeichert, das sie später nicht benötigt werden und im Response nur ein "Content-Type" Header verschickt wird. Die Method und Path variable werden schon gebraucht und überprüft. Wieder aus übersichtsgründen befindet sich das Kontrollieren der Requestmethoden im Server, wird vllt noch verschoben werden müssen. Der User-Endpoint prüft den Username und Password je nach Anforderung und wurde schnell und simple erstellt, da nach der Datenbankeinbindung noch das Dictionary gelöscht werden muss und die Methoden danach sowieso geändert werden müssen. 

https://github.com/theeeeon/Cardgameproject.git
